# -*- coding: UTF-8 -*-
import random
import time
import telebot
import requests
import DatabaseLogicAdminPanel
import DatabaseLogicBuyData
import DatabaseLogicContact
import DatabaseLogicJobs
import DatabaseLogicMarket
import DatabaseLogicProduct
import DatabaseLogicReferalCode
import DatabaseLogicStat
import KeybordClass

# <----->
# <----->
# <----->
# <----->

YOUR_CODE = ''  # <------

# <----->
# <----->
# <----->
# <----->

# pip3 install telebot
# pip3.8 install PyTelegramBitApi

bot = telebot.TeleBot(YOUR_CODE)
dbProduct = DatabaseLogicProduct.DBProductClass()
kb = KeybordClass.ListKeyBoard()
NS = KeybordClass.NameSpace()
MESSAGE_YOURCODE = 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'
MESSAGE_ENTERCODE = 'üìù –í–≤–µ—Å—Ç–∏ –∫–æ–¥'
MESSAGE_STAT = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
MESSAGE_SELFRIGHTS = "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø—Ä–∞–≤–∞?"
MESSAGE_BUYDATA = 'üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã'
MESSAGE_QIWI = '–ò–∑–º–µ–Ω–∏—Ç—å QIWI'
MESSAGE_BITCOIN = '–ò–∑–∏–º–µ–Ω–∏—Ç—å BTC'
MESSAGE_MAINMENU = "‚èÆ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"
MESSAGE_MENUADMIN = "üëΩ –ú–µ–Ω—é –ê–¥–º–∏–Ω–∫–∏"
MESSAGE_CONTROLADMIN = 'üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∞–º–∏'
MESSAGE_CITYANDAREA = '–ì–æ—Ä–æ–¥–∞ –∏ –†–∞–π–æ–Ω—ã'
MESSAGE_ADDADMIN = '–î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞'
MESSAGE_DELETEADMIN = '–£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞'
MESSAGE_JOB = "üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏"
MESSAGE_MARKET = "üè™ –ú–∞–≥–∞–∑–∏–Ω"
MESSAGE_REQUESTJOB = 'üìã –ó–∞—è–≤–∫–∏'
MESSAGE_SENDJOB = "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—É"
MESSAGE_ALLREQUESTJOB = "–í—Å–µ –ó–∞—è–≤–∫–∏"
MESSAGE_LASTREQUESTJOB = "–ü–æ—Å–ª–µ–¥–Ω—è—è"
MESSAGE_DELETEJOB = "–£–î–ê–õ–ò–¢–¨ –í–°–ï"
MESSAGE_SETTING = 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
MESSAGE_WORLD = "üåè –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"
MESSAGE_CANCEL = "–û–¢–ú–ï–ù–ê"
MESSAGE_CANCEL_S = "‚ùå –û—Ç–º–µ–Ω–∞"

dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
dbMarket = DatabaseLogicMarket.DBMarketClass()
dbContact = DatabaseLogicContact.DBContactClass()
dbBuy = DatabaseLogicBuyData.DBBuyDataClass()
dbJob = DatabaseLogicJobs.DBJobClass()
dbStat = DatabaseLogicStat.DBStat()

def pushSale(msg_sale):
    listIDs = dbStat.listUser()
    if not len(listIDs) > 0:
        return
    answer = "üéÅ –°–∫–∏–¥–∫–∞ {}% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã üéÅ".format(msg_sale)
    for id in listIDs:
        try:
            bot.send_message(id, answer, reply_markup=kb.KB_SALE_JOIN, parse_mode='html')
        except BaseException:
            continue
def pushWork():
    listIDs = dbStat.listUser()
    if not len(listIDs) > 0:
        return
    for id in listIDs:
        try:
            bot.send_message(id, NS.ANSWER_JOBMESSAGE, parse_mode='html',reply_markup=kb.KB_WORL_JOIN)
        except BaseException:
            continue
def pushProduct():
    listIDs = dbStat.listUser()
    if not len(listIDs) > 0:
        return
    for id in listIDs:
        try:
            bot.send_message(id, "üè¢Ô∏è –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ —Ç–≤–æ–µ–º —Ä–∞–π–æ–Ω–µ, —á–µ–∫–∞–π üèÉ‚Äç‚ôÇ", parse_mode='html',reply_markup=kb.KB_SALE_JOIN)
        except BaseException:
            continue
def push(id, msg):
    bot.send_message(id, msg, parse_mode='html')


def pushAll(msg,onlyAdmin):
    if onlyAdmin == True:
        id = dbAdmin.onlyAllRights()
    else:
        id = dbAdmin.writeListAdminAll()
    for item in id:
        try:
            push(item, msg)
        except BaseException:
            continue

def show(message):
    db = DatabaseLogicReferalCode.MainDBClass()
    id = message.from_user.id
    code = db.add(id)
    answer = "&#128077; –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {}".format(code)
    bot.send_message(message.chat.id, answer, parse_mode='html')
    countActivation(message)


def countActivation(message):
    db = DatabaseLogicReferalCode.MainDBClass()
    id = message.from_user.id
    count = db.showMyRefEnter_ID(id)
    answer = "&#127939;  –ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {}".format(count)
    bot.send_message(message.chat.id, answer, parse_mode='html')


def enter(message):
    global answer
    try:
        msg = int(message.text)
        db = DatabaseLogicReferalCode.MainDBClass()
        answer = db.update(message.from_user.id, msg)
    except ValueError:
        answer = "–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    bot.send_message(message.chat.id, answer, parse_mode='html')




def state(message):
    print("stat activate")
    db = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if not db.isAdmin(message.from_user.id):
        return
    answer = db.stateAll()
    KB = kb.KB_STAT
    KB.add(kb.button_stat_all)
    bot.send_message(message.chat.id, answer, parse_mode='html', reply_markup=KB)


def join(message):
    db = DatabaseLogicStat.DBStat()
    db.join(message.from_user.id)

def add(message):
    db = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if not db.isAdmin(message.from_user.id):
        return
    bot.send_message(message.chat.id, NS.ANSWER_LEVELADMIN, parse_mode='html', reply_markup=kb.KB_CREATEADMIN)
    bot.register_next_step_handler(message, addAdmin)


def requestJob(message):
    msg = message.text
    if message.text == "–û–¢–ú–ï–ù–ê":
        start(message)
        return
    if not msg.count("\n") >= 3:
        bot.send_message(message.chat.id,
                         "&#10060;  –ù–µ –≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞ –∑–∞—è–≤–∫–∞\n\n&#9888;  –ö–æ–ª-–≤–æ –ø–æ–ª–µ–π –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ.",
                         parse_mode='html', reply_markup=kb.KB_JOBMENU)
        return
    dbJob = DatabaseLogicJobs.DBJobClass()
    print("–í–Ω–æ—Å–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ : {}".format(message.text))
    dbJob.setData(message.text)
    id = dbJob.getID()
    pushAll(
        "&#128276;  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ <b>#{}</b>\n–ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>–ó–ê–Ø–í–ö–ò</b> —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å".format(id),False)
    bot.send_message(message.chat.id, "&#128193; –ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n&#128193; ID –ó–∞—è–≤–∫–∏ {}".format(id),
                     parse_mode='html', reply_markup=kb.KB_DEFAULT)


def start(message):
    db = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if (db.isAdmin(message.from_user.id)):
        bot.send_message(message.chat.id, NS.ANSWER_WELCOM, parse_mode='html',
                         reply_markup=kb.KB_DEFAULTANDADRMIN)
    else:
        bot.send_message(message.chat.id, NS.ANSWER_WELCOM, parse_mode='html',
                         reply_markup=kb.KB_DEFAULT)


def generateNumberBuy():
    return random.randint(10000, 100000)


def editContact(contact):
    if contact.text == "–û–¢–ú–ï–ù–ê":
        bot.send_message(contact.chat.id, "&#9989–û—Ç–º–µ–Ω–∞", parse_mode='html', reply_markup=kb.KB_DELETE)
        bot.send_message(contact.chat.id, "&#9989 –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞", parse_mode='html',
                         reply_markup=kb.KB_SETTING)
        return
    dbContact = DatabaseLogicContact.DBContactClass()
    dbContact.add(contact.text)
    contactNew = dbContact.show()
    answer = "–ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {}".format(contactNew)
    bot.send_message(contact.chat.id, "&#9989 –£—Å–ø–µ—à–Ω–æ", parse_mode='html', reply_markup=kb.KB_DELETE)
    bot.send_message(contact.chat.id, answer, parse_mode='html', reply_markup=kb.KB_SETTING)


def addCityAsk(message, call):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        answer = "‚úÖ –û—Ç–º–µ–Ω–∞"
    elif not dbMarket.isAlreadyCityCheck(message.text):
        answer = "‚ö†Ô∏è –¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ –µ—Å—Ç—å"
    else:
        answer = dbMarket.addCity(message.text)
    bot.send_message(message.chat.id, answer, parse_mode='html', reply_markup=kb.KB_DELETE)
    bot.send_message(call.message.chat.id, "üåè –†–∞–∑–¥–µ–ª –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", reply_markup=kb.KB_CITYCONTROL)


def addAreaAsk(message, infoCity, call):
    answer = "‚ö†Ô∏è –û—à–∏–±–∫–∞."
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        answer = "‚úÖ –û—Ç–º–µ–Ω–∞"
    else:
        if '\n' in message.text:
            answer = dbMarket.addAreaList(infoCity, message.text)
            dbProduct.randomProductForNull()
        if not '\n' in message.text:
            answer = dbMarket.addArea(infoCity, message.text)
            dbProduct.randomProductForNull()
    bot.send_message(message.chat.id, answer, parse_mode='html', reply_markup=kb.KB_DELETE)
    bot.send_message(message.chat.id, "üåè –†–∞–∑–¥–µ–ª –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", reply_markup=kb.KB_CITYCONTROL)


def editBitcoin(call, calldelete):
    answer = dbBuy.updateBitcoin(call, call.text)
    bot.send_message(call.chat.id, answer, parse_mode='html')
    KB = telebot.types.InlineKeyboardMarkup()
    KB.add(kb.button_edit_qiwi)
    KB.add(kb.button_edit_bitcoin)
    KB.add(kb.button_menu_admin)
    bot.delete_message(calldelete.message.chat.id, calldelete.message.message_id)
    bot.send_message(call.chat.id, dbBuy.allDataBuy(), reply_markup=KB, parse_mode='html')
    pushAll("üîî –†–µ–∫–≤–∏–∑–∏—Ç—ã Bitcoin –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã", False)

def editQiwi(call, calldelete):
    try:
        answer = dbBuy.updateQiwi(call, call.text)
    except TypeError:
        answer = "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
    bot.send_message(call.chat.id, answer, parse_mode='html')
    KB = telebot.types.InlineKeyboardMarkup()
    KB.add(kb.button_edit_qiwi)
    KB.add(kb.button_edit_bitcoin)
    KB.add(kb.button_menu_admin)
    bot.delete_message(calldelete.message.chat.id, calldelete.message.message_id)
    bot.send_message(call.chat.id, dbBuy.allDataBuy(), reply_markup=KB, parse_mode='html')
    pushAll("üîî –†–µ–∫–≤–∏–∑–∏—Ç—ã Qiwi –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã",False)


def editContact(call, calldelete):
    bot.delete_message(calldelete.message.chat.id, calldelete.message.message_id)
    answer = dbContact.add(call.text)
    bot.send_message(call.chat.id, answer, parse_mode='html')
    answer = dbContact.show()
    KB = telebot.types.InlineKeyboardMarkup()
    KB.add(kb.kb_setting_back, kb.button_edit_contact)
    bot.send_message(call.chat.id, answer, reply_markup=KB)
def addAdmin(message):
    if dbAdmin.isAdmin(message.from_user.id):
        return False
    key = message.text.replace('ACTIVATE_CODE','')
    if not len(key) > 0:
        return False
    if dbAdmin.addAdmin(message,key):
        bot.send_message(message.chat.id,"‚úÖ –£—Å–ø–µ—à–Ω–æ.",reply_markup=kb.KB_ADMIN)
        pushAll("üîî –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",False)
def Cheque(message,data):
    if not 'https://'  in message.text:
        bot.send_message(message.chat.id,"–ß–µ–∫ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é —Å—Å—ã–ª–∫—É –≤–∫–ª—é—á–∞—è https ://")
        bot.register_next_step_handler(message,Cheque,data)
    else:
        bot.send_message(message.chat.id,"‚úÖ –ß–µ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–π—Ç–µ.")
        cost = dbProduct.productInfoForBuy(data[1])[1]
        pushAll("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º <b>0 —É—Ä–æ–≤–Ω—è</b>\nüîî –ö—Ç–æ-—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É <b>{}</b> btc (<b>{}‚ÇΩ</b>)\n–ß–µ–∫: {}".format(
            converBtc(cost),cost,message.text
        ),True)
def sendJob(message):
    bot.send_message(message.chat.id, NS.ANSWER_REQUESTJOB, parse_mode='html', reply_markup=kb.KB_JOBCANCEL)
    bot.register_next_step_handler(message, requestJob)
def converBtc(rub):
    url = "https://blockchain.info/ru/ticker"
    curs = requests.get(url).json()['RUB']['last']
    return format(rub/curs,'8f')
@bot.message_handler(commands=['start'])
def start_message(message):
    start(message)
    join(message)
    return


@bot.message_handler(content_types=['text'])
def send_text(message):
    if (message.text == MESSAGE_YOURCODE):
        show(message)
    elif (message.text == MESSAGE_ENTERCODE):
        bot.send_message(message.chat.id, NS.ANSWER_ENTERREFCODE, parse_mode='html')
        bot.register_next_step_handler(message, enter)
    elif (message.text == MESSAGE_MAINMENU):
        start_message(message)
    elif ("ACTIVATE_CODE" in message.text):
        addAdmin(message)
        return
    elif message.text == MESSAGE_JOB:
        bot.send_message(message.chat.id, NS.ANSWER_JOBMESSAGE, reply_markup=kb.KB_JOBMENU, parse_mode='html')
    elif message.text == MESSAGE_SENDJOB:
        sendJob(message)
    elif (message.text == MESSAGE_MARKET):
        KB_CITY = kb.createCity(False)
        bot.send_message(message.chat.id, NS.ANSWER_STARTMARKET, reply_markup=KB_CITY, parse_mode='html')
    elif message.text == "ACTIVATE_ADMIN":
        dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
        if dbAdmin.checkAlready():
            dbAdmin.addDefaultAdmin(message)
            bot.send_message(message.chat.id, "&#10004;  –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.–í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                             reply_markup=kb.KB_ADMIN, parse_mode='html')
    elif message.text == MESSAGE_MENUADMIN:
        dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
        if not dbAdmin.isAdmin(message.from_user.id):
            return
        bot.send_message(message.chat.id, "üëΩ –í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", reply_markup=kb.KB_ADMIN)


@bot.callback_query_handler(func=lambda call: call.data in 'main_menu')
def menu(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "‚èÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.KB_DEFAULTANDADRMIN)

@bot.callback_query_handler(func=lambda call: call.data in 'admin_menu')
def admin_menu(call):
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=kb.KB_ADMIN,
        text="üëΩ –í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
@bot.callback_query_handler(func=lambda call: call.data in 'join_market')
def joinMarket(call):
    KB_CITY = kb.createCity(False)
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=NS.ANSWER_STARTMARKET,
        reply_markup=KB_CITY,
        parse_mode='html'
    )
@bot.callback_query_handler(func=lambda call: call.data in 'job_join')
def workJoin(call):
    bot.answer_callback_query(call.id)
    sendJob(call.message)
@bot.callback_query_handler(func=lambda call: call.data in 'close')
def close(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
@bot.callback_query_handler(func=lambda call: call.data in 'push_product')
def PushProduct(call):
    print("activate pushProduct")
    KB = kb.KB_SALE
    answer = "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç"
    pushProduct()
    bot.answer_callback_query(call.id)
    if answer == call.message.text:
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        reply_markup=KB
    )
@bot.callback_query_handler(func=lambda call: call.data in 'push_work')
def workPush(call):
    bot.answer_callback_query(call.id)
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
    pushWork()
    answer = "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç"
    if answer == call.message.text:
        return
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        reply_markup=kb.KB_SALE
    )
@bot.callback_query_handler(func=lambda call: call.data in 'sale_data')
def sale_data(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id,NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=kb.KB_SALE
    )
@bot.callback_query_handler(func=lambda call: call.data in ['control_admin', 'admin_info_data','all_admin'])
def controlAdmin(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    bot.answer_callback_query(call.id)
    KB = kb.KB_CONTROL_ADMIN
    if call.data in 'control_admin':
        bot.edit_message_reply_markup(
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
            reply_markup=KB
        )
    elif call.data in 'all_admin':
        answer = dbAdmin.allAdmin()
        if answer.replace('\n','') == call.message.text.replace('\n',''):
            return
        bot.edit_message_text(
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
            text=answer,
            reply_markup=KB
        )
    else:
        answer = dbAdmin.selfRights(call.message.chat.id)
        if answer.replace('\n', '') == call.message.text.replace('\n', ''):
            return
        bot.edit_message_text(
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
            reply_markup=KB,
            text=answer
        )


@bot.callback_query_handler(func=lambda call: call.data in ['admin_add_admin'])
def stepAddAdmin(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    KB = kb.createAddAdmin(dbAdmin.checkRights(call.message.chat.id))
    bot.edit_message_reply_markup(
        reply_markup=KB,
        message_id=call.message.message_id,
        chat_id=call.message.chat.id
    )

@bot.callback_query_handler(func=lambda call: call.data in ['admin_delete_data'])
def delAdmin(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    KB = kb.createAdminDelete(dbAdmin.checkRights(call.message.chat.id))
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )


@bot.callback_query_handler(func=lambda call: 'deladmin' in call.data)
def deleteAdmin(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    rights = dbAdmin.checkRights(call.data.replace('deladmin',''))
    answer = dbAdmin.deleteAdmin(call.message.chat.id, call.data.replace('deladmin', ''))
    if answer == True:
        pushAll("üîî –£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–∞–º–∏ {}".format(rights),False)
        push(call.data.replace('deladmin',''),"üîî –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    if not dbAdmin.isAdmin(call.message.chat.id):
        bot.delete_message(call.message.chat.id,call.message.message_id)
        return
    KB = kb.createAdminDelete(rights)
    bot.edit_message_reply_markup(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        reply_markup=KB
    )

@bot.callback_query_handler(func=lambda call: 'sale' in call.data)
def sale(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id,NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    KB = kb.KB_SALE
    if not dbProduct.countProduct() > 0:
        answer = "‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n‚ÑπÔ∏è –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    else:
        dbProduct.sale(call.data.replace('sale_',''))
        pushSale(call.data.replace('sale_',''))
        answer = "‚úÖ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞"
    if answer.replace('\n','') == call.message.text.replace('\n',''):
        return
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        reply_markup=KB
    )
@bot.callback_query_handler(func=lambda call: call.data in ['buy_data', 'edit_qiwi', 'edit_bitcoin'])
def buy(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    print("activate buy")
    if call.data in 'buy_data':
        bot.answer_callback_query(call.id)
        answer = dbBuy.allDataBuy()
        KB = telebot.types.InlineKeyboardMarkup()
        KB.add(kb.button_edit_qiwi)
        KB.add(kb.button_edit_bitcoin)
        KB.row(kb.button_menu_admin)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=KB,
            text=answer,
            parse_mode='html'
        )
    elif call.data in 'edit_qiwi':
        if dbAdmin.checkRights(call.message.chat.id) == 2:
            bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
            return
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
            text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è QIWI\n\n‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –ª–∏–±–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É(–≤–º–µ—Å—Ç–µ —Å https ://)"
        )
        bot.register_next_step_handler(call.message, editQiwi, call)
    elif call.data in 'edit_bitcoin':
        if dbAdmin.checkRights(call.message.chat.id) == 2:
            bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
            return
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
            text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Bitcoin\n\n‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã"
        )
        bot.register_next_step_handler(call.message, editBitcoin, call)


@bot.callback_query_handler(func=lambda call: call.data in ['order_data', 'order_all', 'order_last', 'order_delete'])
def order(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    KB = telebot.types.InlineKeyboardMarkup()
    KB.row(kb.kb_button_order_all, kb.kb_button_order_last)
    KB.add(kb.kb_button_order_delete)
    KB.add(kb.button_menu_admin)
    if call.data in 'order_data':
        bot.answer_callback_query(call.id)
        answer = "üíº –†–∞–∑–¥–µ–ª –ó–∞—è–≤–∫–∏"
        KB = telebot.types.InlineKeyboardMarkup()
        KB.row(kb.kb_button_order_all, kb.kb_button_order_last)
        KB.add(kb.kb_button_order_delete)
        KB.add(kb.button_menu_admin)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=answer,
            reply_markup=KB)
        return
    elif call.data in 'order_all':
        bot.answer_callback_query(call.id)
        answer = dbJob.getAllData()
        if answer.replace('\n', '') == call.message.text.replace('\n', ''):
            return
        KB = telebot.types.InlineKeyboardMarkup()
        KB.row(kb.kb_button_order_all, kb.kb_button_order_last)
        KB.add(kb.kb_button_order_delete)
        KB.add(kb.button_menu_admin)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=answer,
            parse_mode='html',
            reply_markup=KB)
        return
    elif call.data in 'order_last':
        bot.answer_callback_query(call.id)
        answer = dbJob.getData()
        if answer.replace('\n', '') == call.message.text.replace('\n', ''):
            return
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=answer,
            parse_mode='html',
            reply_markup=KB)
        return
    elif call.data in 'order_delete':
        if dbAdmin.checkRights(call.message.chat.id) == 2:
            bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
            return
        bot.answer_callback_query(call.id)
        answer = dbJob.clearData()
        print(answer)
        if answer == call.message.text:
            return
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=answer,
            reply_markup=KB,
            parse_mode='html'
        )
        return


@bot.callback_query_handler(func=lambda call: call.data in 'delete_product_data')
def deleteProductData(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –ó–∞–∫—Ä–µ–ø–∏—Ç—å –¢–æ–≤–∞—Ä !")
    KB = kb.createProductDelete()
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        parse_mode='html',
        text="‚ö†Ô∏è –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –¢–æ–≤–∞—Ä—ã</b>"
    )


@bot.callback_query_handler(func=lambda call: '/delete_product' in call.data)
def deleteProduct(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    dbProduct.productDelete(call.data.replace('/delete_product', ''))
    KB = kb.createProductDelete()
    bot.edit_message_reply_markup(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        reply_markup=KB
    )


@bot.callback_query_handler(func=lambda call: call.data in ['stat_data', 'stat_all'])
def stat(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    bot.answer_callback_query(call.id)
    if call.data in 'stat_data':
        answer = dbAdmin.stateAll()
        KB = telebot.types.InlineKeyboardMarkup()
        KB.row(kb.button_menu_admin, kb.button_stat_all)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=KB,
            parse_mode='html',
            text=answer
        )
    else:
        answer = dbMarket.statisticMarket()
        KB = telebot.types.InlineKeyboardMarkup()
        KB.add(kb.button_stat_default)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=KB,
            parse_mode='html',
            text=answer
        )


@bot.callback_query_handler(func=lambda call: call.data in ['contact', 'edit_contact'])
def contact(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if call.data in 'contact':
        bot.answer_callback_query(call.id)
        answer = dbContact.show()
        KB = telebot.types.InlineKeyboardMarkup()
        KB.add(kb.kb_setting_back, kb.button_edit_contact)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=KB,
            text=answer,
            parse_mode='html'
        )
    elif call.data in 'edit_contact':
        if dbAdmin.checkRights(call.message.chat.id) == 2:
            bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
            return
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            message_id=call.message.message_id,
            chat_id=call.message.chat.id,
            text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π</b> –∞–¥—Ä–µ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            parse_mode='html'
        )
        bot.register_next_step_handler(call.message, editContact, call)


@bot.callback_query_handler(func=lambda call: call.data in 'setting_data')
def setting(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        parse_mode='html',
        reply_markup=kb.KB_SETTING,
        text="üîß –†–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    )


@bot.callback_query_handler(func=lambda call: '/city' in call.data)
def stepArea(call):
    dbMarket = DatabaseLogicMarket.DBMarketClass()
    cityName = call.data.replace('/city', '')
    if not dbMarket.isAlreadyCity(cityName):
        return
    KB_AREA = kb.createArea(cityName)
    answer = "üèô –ì–æ—Ä–æ–¥: <b>{}</b>\n\nüè£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω".format(cityName)
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        parse_mode='html',
        reply_markup=KB_AREA
    )


@bot.callback_query_handler(func=lambda call: 'addadmin' in call.data)
def addAdminRef(call):
    bot.answer_callback_query(call.id)
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    answer = "ACTIVATE_CODE "+str(dbAdmin.generateAdminRefCode(call.data.replace('addadmin','')))
    if len(answer) > 0:
        pushAll("üîî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",False)
    bot.send_message(call.message.chat.id,answer)
@bot.callback_query_handler(func=lambda call: '/next' in call.data)
def stepCity(call):
    next = call.data.replace('/next', '')
    if next == "one":
        KB = kb.createCity(True)
    else:
        KB = kb.createCity(False)
    bot.answer_callback_query(call.id)
    bot.edit_message_text(message_id=call.message.message_id,
                          chat_id=call.message.chat.id,
                          reply_markup=KB,
                          parse_mode='html',
                          text=NS.ANSWER_STARTMARKET)


@bot.callback_query_handler(func=lambda call: '/area' in call.data)
def stepProduct(call):
    areaID = call.data.replace('/area', '')
    KB = kb.createProduct(areaID)
    info = dbMarket.getInfoArea(areaID)
    answer = "üèô <b>{}</b>.\nüè£ <b>{}</b>.".format(info[0], info[1])
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        reply_markup=KB,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: '/product_back' in call.data)
def backArea(call):
    call.data = call.data.replace('/product_back', '/city')
    stepArea(call)


@bot.callback_query_handler(func=lambda call: '/sell' in call.data)
def sellProduct(call):
    bot.answer_callback_query(call.id)
    areaId = call.data.replace('/sell', '').split('|')[0]
    productId = call.data.replace('/sell', '').split('|')[1]
    print("areaId = {} | productId = {}".format(areaId, productId))
    KB = kb.createBuy(areaId, productId)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=KB)
@bot.callback_query_handler(func=lambda call: '/banker' in call.data)
def buyBot(call):
    print(call.data)
    idArea = call.data.replace('/banker','').split('|')[0]
    idProduct = call.data.replace('/banker','').split('|')[1]
    dbMarket.addCashCity(idProduct, idArea)
    orderId = generateNumberBuy()
    print("idArea = {} | idProduct = {}".format(idArea,idProduct))
    KB = kb.createBuyBot(idArea,idProduct,orderId)
    cost = dbProduct.productInfoForBuy(idProduct)[1]
    NameAndWeight = dbProduct.productInfoForBuy(idProduct)[0]
    answer = "üìÑOrder #{}\nüïë –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞\n\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{} btc</b> ({}‚ÇΩ)\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>\n\nüì• –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>BTC Banker</b>\n\n\n‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–ª–∞–¥–∞</b> –±—É–¥—É—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏–±–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b> –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {}".format(
        orderId,converBtc(cost),cost, NameAndWeight, dbContact.show()
    )
    pushAll("üîî –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ BTC Banker, –æ–∂–∏–¥–∞–π—Ç–µ —á–µ–∫.",False)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        reply_markup=KB,
        parse_mode='html'
    )
@bot.callback_query_handler(func=lambda call: '/infobot' in call.data)
def infoBanker(call):
    bot.answer_callback_query(call.id)
    idArea = call.data.replace('/infobot', '').split('|')[0]
    idProduct = call.data.replace('/infobot', '').split('|')[1]
    orderId = call.data.replace('/infobot', '').split('|')[2]
    KB = kb.createBuyBot(idArea, idProduct, orderId)
    cost = dbProduct.productInfoForBuy(idProduct)[1]
    NameAndWeight = dbProduct.productInfoForBuy(idProduct)[0]
    answer = "üìÑOrder #{}\nüïë –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞\n\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{} btc</b> ({}‚ÇΩ)\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>\n\nüì• –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>BTC Banker</b>\n\n\n‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–ª–∞–¥–∞</b> –±—É–¥—É—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏–±–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b> –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {}".format(
        orderId, converBtc(cost), cost, NameAndWeight, dbContact.show()
    )
    if answer.replace('<b>', '').replace('</b>', '').replace('\n', '') == call.message.text.replace('<b>', '').replace(
            '</b>', '').replace('\n', ''):
        return
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        reply_markup=KB,
        parse_mode='html'
    )

@bot.callback_query_handler(func=lambda call: 'sendcheck' in call.data)
def sendCheque(call):
    bot.send_message(call.message.chat.id, "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å—Å—ã–ª–∫—É</b> –Ω–∞ —á–µ–∫ ", parse_mode='html')
    bot.register_next_step_handler(call.message,Cheque,call.data.replace('sendcheck','').split('|'))
@bot.callback_query_handler(func=lambda call: '/geobot' in call.data)
def geoBot(call):
    print("start geobot")
    bot.answer_callback_query(call.id)
    idArea = call.data.replace('/geobot', '').split('|')[0]
    idProduct = call.data.replace('/geobot', '').split('|')[1]
    orderId = call.data.replace('/geobot', '').split('|')[2]
    KB = kb.createBuyBot(idArea, idProduct, orderId)

    city = dbMarket.getInfoArea(idArea)[0]
    area = dbMarket.getInfoArea(idArea)[1]
    NameAndWeight = dbProduct.productInfoForBuy(idProduct)[0]
    answer = "üìÑOrder #{}\nüïë –°—Ç–∞—Ç—É—Å:  <b>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\n\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>.\n\nüèô –ì–æ—Ä–æ–¥: <b>{}</b>.\nüè£ –†–∞–π–æ–Ω: <b>{}</b>.\nüåê GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.</b>\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</b>".format(
        orderId, NameAndWeight, city, area
    )
    if answer.replace('<b>', '').replace('</b>', '').replace('\n', '') == call.message.text.replace('<b>', '').replace(
            '</b>', '').replace('\n', ''):
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        reply_markup=KB,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: '/bitcoin' in call.data)
def buyBitcoin(call):
    bot.answer_callback_query(call.id)
    orderId = generateNumberBuy()
    idProduct = call.data.replace('/bitcoin','').split('|')[1]
    idArea = call.data.replace('/bitcoin','').split('|')[0]
    pushAll("üîî –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑. –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <b>BitCoin</b>\nüí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: {} btc\nüõç –¢–æ–≤–∞—Ä: {}".format(
        converBtc(dbProduct.productInfoForBuy(idProduct)[1]),dbProduct.productInfoForBuy(idProduct)[0]
    ),False)
    dbMarket.addCashCity(idProduct,idArea)
    KB = kb.createBuyBitcoin(idArea,idProduct,orderId)

    allInfoProduct = dbProduct.productInfoForBuy(idProduct)
    costToBitcoin = converBtc(allInfoProduct[1])
    NameAndWeight = allInfoProduct[0]
    answer = "üìÑOrder #{}\nüïë –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\nüì• Bitcoin –∞–¥—Ä–µ—Å: {}\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{} btc</b>\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>\n\nüì• –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>BitCoin</b>\n\n\n‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–ª–∞–¥–∞</b> –±—É–¥—É—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏–±–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b> –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {}".format(
        orderId,dbBuy.bitcoinData(),costToBitcoin,NameAndWeight,dbContact.show()
    )
    if answer.replace('<b>', '').replace('</b>', '').replace('\n', '') == call.message.text.replace('<b>', '').replace(
            '</b>', '').replace('\n', ''):
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        reply_markup=KB,
        parse_mode='html'
    )

@bot.callback_query_handler(func=lambda call: '/infobitcoin' in call.data)
def infoBtc(call):
    bot.answer_callback_query(call.id)
    idArea = call.data.replace('/infobitcoin','').split('|')[0]
    idProduct = call.data.replace('/infobitcoin','').split('|')[1]
    orderId = call.data.replace('/infobitcoin','').split('|')[2]
    KB = kb.createBuyBitcoin(idArea, idProduct, orderId)

    allInfoProduct = dbProduct.productInfoForBuy(idProduct)
    costToBitcoin = converBtc(allInfoProduct[1])
    NameAndWeight = allInfoProduct[0]
    answer = "üìÑOrder #{}\nüïë –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\nüì• Bitcoin –∞–¥—Ä–µ—Å: <b>{}</b>\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{} btc</b>\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>\n\nüì• –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>BitCoin</b>\n\n\n‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–ª–∞–¥–∞</b> –±—É–¥—É—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏–±–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b> –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {}".format(
        orderId, dbBuy.bitcoinData(), costToBitcoin, NameAndWeight, dbContact.show()
    )
    if answer.replace('<b>', '').replace('</b>', '').replace('\n', '') == call.message.text.replace('<b>', '').replace(
            '</b>', '').replace('\n', ''):
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        reply_markup=KB,
        parse_mode='html'
    )
@bot.callback_query_handler(func=lambda call: '/geobitcoin' in call.data)
def geoBtc(call):
    bot.answer_callback_query(call.id)
    idArea = call.data.replace('/geobitcoin','').split('|')[0]
    idProduct = call.data.replace('/geobitcoin','').split('|')[1]
    orderId = call.data.replace('/geobitcoin','').split('|')[2]
    KB = kb.createBuyBitcoin(idArea, idProduct, orderId)

    city = dbMarket.getInfoArea(idArea)[0]
    area = dbMarket.getInfoArea(idArea)[1]
    NameAndWeight = dbProduct.productInfoForBuy(idProduct)[0]
    answer = "üìÑOrder #{}\nüïë –°—Ç–∞—Ç—É—Å:  <b>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\n\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>.\n\nüèô –ì–æ—Ä–æ–¥: <b>{}</b>.\nüè£ –†–∞–π–æ–Ω: <b>{}</b>.\nüåê GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.</b>\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</b>".format(
        orderId, NameAndWeight, city, area
    )
    if answer.replace('<b>', '').replace('</b>', '').replace('\n', '') == call.message.text.replace('<b>', '').replace(
            '</b>', '').replace('\n', ''):
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        reply_markup=KB,
        parse_mode='html'
    )

@bot.callback_query_handler(func=lambda call: '/qiwi' in call.data)
def qiwi(call):
    info = call.data.replace('/qiwi', '').split('|')
    dbMarket.addCashCity(info[1], info[0])
    orderId = generateNumberBuy()
    comment = random.randint(10000, 50000)
    idArea = call.data.replace('/qiwi', '').split('|')[0]
    idProduct = call.data.replace('/qiwi', '').split('|')[1]
    NameAndWeight = dbProduct.productInfoForBuy(idProduct)[0]
    cost = dbProduct.productInfoForBuy(idProduct)[1]
    pushAll("üîî –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑. –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <b>Qiwi</b>\nüí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: {}‚ÇΩ\nüõç –¢–æ–≤–∞—Ä: {}".format(
        cost, NameAndWeight
    ),False)
    KB = kb.createBuyQiwi(idArea, idProduct, orderId, comment)
    contact = dbContact.show()
    answer = "üìÑOrder #{}\n\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{}‚ÇΩ</b>\n\nüì• –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>QIWI</b>\nüìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <b>{}</b>\n\n\n‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–ª–∞–¥–∞</b> –±—É–¥—É—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏–±–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b> –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {}".format(
        orderId, NameAndWeight, cost, comment, contact)
    bot.answer_callback_query(call.id)
    print(answer)
    print(call.message.text)
    if answer.replace('<b>', '').replace('</b>', '').replace('\n', '') == call.message.text.replace('<b>', '').replace(
            '</b>', '').replace('\n', ''):
        return
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        parse_mode='html',
        text=answer
    )


@bot.callback_query_handler(func=lambda call: '/info' in call.data)
def orderInfo(call):
    info = call.data.replace('/info', '').split('|')
    KB = kb.createBuyQiwi(info[0], info[1], info[2], info[3])
    print("orderInfo = {}".format(info))
    order = info[2]
    comment = info[3]
    product = dbProduct.productInfoForBuy(info[1])
    contact = dbContact.show()
    if product == 0:
        productInfo = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
        cost = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        productInfo = product[0]
        cost = product[1]
    answer = "üìÑOrder #{}\n\nüì¶ –¢–æ–≤–∞—Ä: <b>{}</b>\nüí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{}‚ÇΩ</b>\n\nüì• –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>QIWI</b>\nüìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <b>{}</b>\n\n\n‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–ª–∞–¥–∞</b> –±—É–¥—É—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏–±–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b> –Ω–µ—Ç —Ñ–æ—Ç–æ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {}".format(
        order, productInfo, cost, comment, contact
    )
    bot.answer_callback_query(call.id)
    if answer.replace('<b>','').replace('</b>','').replace('\n','') == call.message.text.replace('<b>','').replace('</b>','').replace('\n',''):
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        parse_mode='html',
        reply_markup=KB
    )
@bot.callback_query_handler(func=lambda call: '/geo' in call.data)
def geo(call):
    info = call.data.replace('/geo', '').split('|')
    print("geo = {}".format(info))
    order = info[2]
    KB = kb.createBuyQiwi(info[0], info[1], info[2], info[3])
    city = dbMarket.getInfoArea(info[0])[0]
    area = dbMarket.getInfoArea(info[0])[1]
    answer = "üìÑOrder #{}\nüïë –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n\nüèô –ì–æ—Ä–æ–¥: <b>{}</b>.\nüè£ –†–∞–π–æ–Ω: <b>{}</b>.\nüåê GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.</b>\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</b>".format(
        order, city, area
    )
    bot.answer_callback_query(call.id)
    if answer.replace('<b>','').replace('</b>','').replace('\n','') == call.message.text.replace('<b>','').replace('</b>','').replace('\n',''):
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        parse_mode='html', reply_markup=KB
    )


@bot.callback_query_handler(func=lambda call: call.data in 'stat_all')
def statAll(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    answer = str(dbMarket.statisticMarket())
    KB = telebot.types.InlineKeyboardMarkup()
    KB.add(kb.button_stat_default)
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text="{}".format(answer),
        reply_markup=KB,
        parse_mode='html'
    )
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data in 'stat_default')
def statDefault(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    answer = str(dbAdmin.stateAll())
    KB = telebot.types.InlineKeyboardMarkup()
    KB.add(kb.button_stat_all)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text="{}".format(answer),
        parse_mode='html'
    )
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data in 'add_product')
def addProduct(call):
    bot.answer_callback_query(call.id)
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    KB = kb.KB_CATEGORY_ADD
    answer = "üíµ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞\n\n‚ö†Ô∏è–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å—Ç–∞—Ä—ã–µ –±—É–¥—É—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã."
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        reply_markup=KB,
        text=answer,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: call.data in 'cancel_pay')
def cancel_pay(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data in 'random_product')
def randomProduct(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    answer = dbProduct.randomProduct()
    if answer == call.message.text:
        return
    KB = kb.KB_SETTING
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text=answer,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: call.data in 'random_product_last')
def randomProduct(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    answer = dbProduct.randomProduct()
    if answer == call.message.text:
        return
    KB = kb.KB_SETTING
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text=answer,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: 'cost_c' in call.data)
def addNewProduct(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    category = call.data.replace('cost_c', '')
    answerAdd = dbProduct.addProducts(category)
    bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ  –ó–∞–∫—Ä–µ–ø–∏—Ç—å –¢–æ–≤–∞—Ä !")
    if not answerAdd:
        answer = "‚ùóÔ∏è–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
    else:
        answer = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ó–∞–∫—Ä–µ–ø–∏—Ç—å –¢–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        reply_markup=kb.KB_SETTING,
        parse_mode='html',
        text=answer
    )


@bot.callback_query_handler(func=lambda call: call.data in 'setting_back')
def setting_back(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    answer = "&#128221;  –í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤  &#128221;"
    KB = kb.KB_SETTING
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text=answer,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: call.data in 'list_product')
def listProduct(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    bot.answer_callback_query(call.id)
    if not dbProduct.isAlready():
        answer = "‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞."
    else:
        answer = dbProduct.productAll()
    if answer.replace('\n', '') == call.message.text.replace('\n', ''):
        return
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        text=answer,
        reply_markup=kb.KB_SETTING,
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: call.data in 'world_data')
def worldData(call):
    bot.answer_callback_query(call.id)
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=kb.KB_CITYCONTROL,
        text="üåè –†–∞–∑–¥–µ–ª –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"
    )


@bot.callback_query_handler(func=lambda call: call.data in 'deletearea')
def deleteArea(call):
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    KB = kb.createCityForDeleteArea()
    answer = "üåÅ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–π–æ–Ω"
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text=answer
    )


@bot.callback_query_handler(func=lambda call: call.data in 'deletecity')
def deleteCity(call):
    dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    KB = kb.createCityDelete()
    bot.edit_message_reply_markup(
        message_id=call.message.message_id,
        chat_id=call.message.chat.id,
        reply_markup=KB
    )


@bot.callback_query_handler(func=lambda call: call.data in 'addcity')
def addCity(call):
    dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id, NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    answer = "üèô –í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n\n" \
             "üìå –ü—Ä–∞–≤–∏–ª–∞:\n\n‚ùó‚úèÔ∏è –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π <b>—É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ</b>\n" \
             "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <b>–ë</b>–æ–ª—å—à–æ–π –±—É–∫–≤—ã."
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, answer, parse_mode='html', reply_markup=kb.kb_all_cancel)
    bot.register_next_step_handler(call.message, addCityAsk, call)


@bot.callback_query_handler(func=lambda call: call.data in 'addarea')
def addArea(call):
    dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id,NS.ANSWER_ERROR)
        return
    answer = "üìú –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω—ã"
    KB = kb.createCityEdit()
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        reply_markup=KB
    )

@bot.callback_query_handler(func=lambda call: call.data in 'allworld')
def allworld(call):
    bot.answer_callback_query(call.id)
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    answer = dbMarket.listAll()
    KB = kb.KB_CITYCONTROL
    if call.message.text.replace('\n', '') == answer.replace('\n', ''):
        return
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text=answer
    )


@bot.callback_query_handler(func=lambda call: '/ac' in call.data)
def addArea(call):
    bot.answer_callback_query(call.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    cityName = call.data.replace('/ac', '')
    answer = "üèô –ì–æ—Ä–æ–¥: <b>{}</b>\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–∞–π–æ–Ω–æ–≤: <b>12</b>\n\n".format(
        cityName
    )
    answer_help = "‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ <b>–±–æ–ª—å—à–µ</b> 1 —Ä–∞–π–æ–Ω–∞ –∑–∞ —Ä–∞–∑ —Ç–æ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω –≤–≤–æ–¥–∏—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n" \
                  "üìå –ü—Ä–∏–º–µ—Ä:\n\n–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω\n–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω\n–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω"

    bot.send_message(call.message.chat.id, answer + answer_help, reply_markup=kb.kb_all_cancel, parse_mode='html')
    bot.register_next_step_handler(call.message, addAreaAsk, cityName, call)


@bot.callback_query_handler(func=lambda call: '/cda' in call.data)
def deleteArea(call):
    bot.answer_callback_query(call.id)
    nameCity = call.data.replace('/cda', '')
    KB = kb.createAreaDelete(nameCity)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB,
        text="üèô –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω"
    )


@bot.callback_query_handler(func=lambda call: '/da' in call.data)
def deleteAreaIndex(call):
    bot.answer_callback_query(call.id)
    info = call.data.replace('/da', '').split('|')
    cityName = dbMarket.getNameCity(info[1])
    areaName = info[0]
    dbMarket.deleteArea(cityName, areaName)
    KB = kb.createAreaDelete(cityName)
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=KB
    )


@bot.callback_query_handler(func=lambda call: '/dc' in call.data)
def deleteCity(call):
    dbMarket = DatabaseLogicMarket.DBMarketClass()
    cityName = call.data.replace('/dc', '')
    dbMarket.deleteCity(cityName)
    KB = kb.createCityDelete()
    answer = "üåÅ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        parse_mode='html',
        reply_markup=KB
    )


@bot.callback_query_handler(func=lambda call: call.data == "close_world")
def back(call):
    KB = kb.KB_CITYCONTROL
    answer = MESSAGE_WORLD
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'editcontact')
def queryEditContact(call):
    dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.send_message(call.message.chat.id, NS.ANSWER_ERROR)
        return
    bot.send_message(call.message.chat.id, NS.ANSWER_EDITCONTACT, parse_mode='html', reply_markup=kb.KB_JOBCANCEL)
    bot.register_next_step_handler(call.message, editContact)


@bot.callback_query_handler(func=lambda call: call.data == 'contact')
def queryContact(call):
    print("ACTIVATE contact")
    dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
    print("{}".format(call.message.from_user.id))
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    print("continue")
    dbContact = DatabaseLogicContact.DBContactClass()
    contact = dbContact.show()
    answer = "&#128221; –ö–æ–Ω–∞—Ç–∫—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {}".format(contact)
    bot.send_message(call.message.chat.id, answer, parse_mode='html', reply_markup=kb.KB_SETTING)


@bot.callback_query_handler(func=lambda call: call.data in 'export')
def queryExport_ask(call):
    dbAdmin = DatabaseLogicAdminPanel.DBAdminPanelClass()
    if not dbAdmin.isAdmin(call.message.chat.id):
        return
    if dbAdmin.checkRights(call.message.chat.id) == 2:
        bot.answer_callback_query(call.id,NS.ANSWER_ERROR)
        return
    bot.answer_callback_query(call.id)
    file = dbAdmin.exportDB()
    bot.send_document(call.message.chat.id, file)


while True:
    try:
        bot.polling()
    except:
        time.sleep(15)
